Terraform / IaC
=================

Doc Version: Terraform 0.12 and later. 

https://www.terraform.io/docs/configuration/index.html

About Terraform: 
---------------
Terraform uses its own configuration language, designed to allow concise descriptions of infrastructure

Resources and Modules:
----------------------
The main purpose of the Terraform language is declaring resources. All other language features exist only to make the definition of resources more flexible and convenient.

A group of resources can be gathered into a module, which creates a larger unit of configuration. A resource describes a single infrastructure object, while a module might describe a set of objects and the necessary relationships between them in order to create a higher-level system.


Syntax: Arguments, Blocks, and Expressions:
------------------------------------------
The syntax of the Terraform language consists of only a few basic elements:

resource "aws_vpc" "main" {
  cidr_block = var.base_cidr_block
}

<BLOCK TYPE> "<BLOCK LABEL>" "<BLOCK LABEL>" {
  # Block body
  <IDENTIFIER> = <EXPRESSION> # Argument
}

Code Organization:
------------------
The Terraform language uses configuration files that are named with the .tf file extension. There is also a JSON-based variant of the language that is named with the .tf.json file extension.

Configuration Ordering:
----------------------
Terraform automatically processes resources in the correct order based on relationships defined between them in configuration, and so you can organize resources into source files in whatever way makes sense for your infrastructure.

Terraform CLI vs. Providers:
----------------------------
The Terraform command line interface (CLI) is a general engine for evaluating and applying Terraform configurations...

Also Terraform uses "plugins called providers" that each define and manage a set of resource types. Most providers are associated with a particular cloud or on-premises infrastructure service, allowing Terraform to manage infrastructure objects within that service.

About Providers (Plugin):
-------------------------
	Terraform code is primarily written in a language called HCL in files with the extension ".tf". The first step to using terraform is to configure the provider(s) you want to use 
	
	For aws: 
	--------
	variable "aws_region" {}

	variable "base_cidr_block" {
	  description = "A /16 CIDR range definition, such as 10.1.0.0/16, that the VPC will use"
	  default = "10.1.0.0/16"
	}

	variable "availability_zones" {
	  description = "A list of availability zones in which to create subnets"
	  type = list(string)
	}

	provider "aws" {
	  region = var.aws_region
	}

	resource "aws_vpc" "main" {
	  # Referencing the base_cidr_block variable allows the network address
	  # to be changed without modifying the configuration.
	  cidr_block = var.base_cidr_block
	}
	
	
	For On-prem:
	------------
	filename.tf 
	
	variable "compute_image_GSCLOUD_OS_LINUX6" {
		default = "GSCLOUD.OS(LINUX6)",
		type = "string"									## This represents the variable type is string 
	}

	data "gscloud_compute_patching_windows" "pw" {
														## Data can be passed as an argument while calling from resource 
	}
	
	variable "compute_data_center_group_1" {
		default = 1,
		type = "string"
	}
	
	variable "compute_os_family_linux" {
		default = "Linux",
		type = "string"
	}
	
	variable "compute_shape_standard" {
		default = "Standard",
		type = "string"
	}
	
	variable "compute_package_groups" {
		default = [
			"/mypath1/",
			"/mypath2/"
		],
		type = "list"									## This represents the variable type is list, it can have more than one value 
	}
	
	variable "compute_master_nodes" {
		default = [
			{
				key = "/mypath3/",
				attributes = {
					"username" = "sarav"
				}
			},
			{
				key = "/mypath4/",
				attributes = {
					"owner" = "sarav",
					"perms" = "755",
					"dirname" = "/local/data/home/sarav",
					"group" = "mygroupname"
				}
			},
			{
				key = "/mypath5/",
				attibutes = {
					"mountpath" = ":/local/data/home/sarav",
					"readonly" = "False",
					"entryname" = "sarav"
				}
			},
			{
				key = "/mypath6/",
				attibutes = {
					"httpport" = "19200",
					"httpsport" = "8443"
				}
			}
		],
		type = "list"											## Represents the variable type is list 
	}
	
	//Terraform "Resource" for Dynamic compute - Master node 1
	resource "gscloud_compute_instance" "<my_master_node1>" {
		hostname = "<myhostname1>",
		compute_type = "VM",
		data_center_group = 1, 
		os_family = "${'$'} {
			var.compute_os_family_linux
		}",
		image = "${'$'} {
			var.compute_image_GSCLOUD_OS_LINUX6
		}",
		shape = "${'$'} {
			var.compute_shape_standard
		}",
		patching_window = "${'$'} {
			data.gscloud_compute_patching_windows.pw.patching_window [
				"1st Saturday @ 7pm"										## Passing data as argument
			]
		}",
		package_groups = "${'$'} {
			var.compute_package_groups
		}",
		configs = "${'$'} {
			var.compute_master_nodes
		}"
	}
	
	resource "gscloud_compute_instance" "<my_master_node2>" {
		.......
	} 
	
	resource "gscloud_deployment_order" "mydeploy_order" {
		region = "Americas",
		charge_code = "<xxxxxxx>",
		// business_reason = "Update my dev environment", 		## To hard code the business reason for each deployment 
		business_reason = "Update my dev env (${conduit.rendering.timestamp})"   ## To hard code the reason with time 
		temp_instance = false, 
		depends_on = [
			"gscloud_compute_instance.my_master_node1",
			"gscloud_compute_instance.my_master_node2"
		]
	}
	
	output "gscloud_deployment_order_tracking_url" {
		value = "${'$'} {
			gscloud_deployment_order.mydeploy_order.tracking_url
		}"
	}
	
	
Deployment:
-----------
a. Validation: Go to deployment tool (ex: Conduit) and build the new revision. Conduit's validation phase then builds an "Execution plan" and publish

b. Promote: As part of the Conduit promote phase, Infrastructure is provisioned by the respective providers with no manual interaction.


Terraform Commands (CLI) : https://www.terraform.io/docs/commands/index.html
==========================

1. Terraform is controlled via a very easy to use command-line interface (CLI). Terraform is only a single command-line application: terraform. This application then takes a subcommand such as "apply" or "plan". 
	
	$ terraform
	Usage: terraform [--version] [--help] <command> [args]
	
	The available commands for execution are listed below
	
	Common commands:
    apply              Builds or changes infrastructure
    console            Interactive console for Terraform interpolations
    destroy            Destroy Terraform-managed infrastructure
    fmt                Rewrites config files to canonical format
    get                Download and install modules for the configuration
    graph              Create a visual graph of Terraform resources
    import             Import existing infrastructure into Terraform
    init               Initialize a new or existing Terraform configuration
    output             Read an output from a state file
    plan               Generate and show an execution plan
    providers          Prints a tree of the providers used in the configuration
    push               Upload this Terraform module to Terraform Enterprise to run
    refresh            Update local state file against real resources
    show               Inspect Terraform state or plan
    taint              Manually mark a resource for recreation
    untaint            Manually unmark a resource as tainted
    validate           Validates the Terraform files
    version            Prints the Terraform version
    workspace          Workspace management

	All other commands:
    debug              Debug output management (experimental)
    force-unlock       Manually unlock the terraform state
    state              Advanced state management

	
2.  To get help for any specific command, pass the -h flag to the relevant subcommand. For example, to see help about the graph subcommand:

	$ terraform graph -h
	Usage: terraform graph [options] PATH
	
3. Shell Tab-completion
		To add the necessary commands to your shell profile, run the following command:

	$ terraform -install-autocomplete
	$ terraform -uninstall-autocomplete
	
Environment Variables: https://www.terraform.io/docs/commands/environment-variables.html
======================
TF_LOG:
		export TF_LOG=TRACE	## If set to any value, enables detailed logs to appear on stderr which is useful for debugging
		export TF_LOG=		## If set to any value, enables detailed logs to appear on stderr which is useful for debugging
		
TF_LOG_PATH:
		This specifies where the log should persist its output to. Note that even when TF_LOG_PATH is set, TF_LOG must be set in order for any logging to be enabled
		
		export TF_LOG_PATH=./terraform.log
		
TF_VAR_name:
		Environment variables can be used to set variables. The environment variables must be in the format TF_VAR_name and this will be checked last for a value. For example:

		export TF_VAR_region=us-west-1
		export TF_VAR_ami=ami-049d8641
		export TF_VAR_alist='[1,2,3]'
		export TF_VAR_amap='{ foo = "bar", baz = "qux" }'
